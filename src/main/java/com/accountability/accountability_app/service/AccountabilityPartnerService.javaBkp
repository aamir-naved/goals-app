package com.accountability.accountability_app.service;

import com.accountability.accountability_app.model.AccountabilityPartner;
import com.accountability.accountability_app.model.User;
import com.accountability.accountability_app.repository.AccountabilityPartnerRepository;
import com.accountability.accountability_app.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class AccountabilityPartnerService {

    @Autowired
    private AccountabilityPartnerRepository accountabilityPartnerRepository;

    @Autowired
    private UserRepository userRepository;

//    public String sendRequest(Long senderId, Long receiverId) {
//        System.out.println("Sending request from " + senderId + " to " + receiverId);
//        Optional<User> senderOpt = userRepository.findById(senderId);
//        Optional<User> receiverOpt = userRepository.findById(receiverId);
//
//
//        if (senderOpt.isEmpty() || receiverOpt.isEmpty()) {
//            return "User not found.";
//        }
//
//        User sender = senderOpt.get();
//        System.out.println("Sender Name : " + sender.getName());
//        User receiver = receiverOpt.get();
//        System.out.println("Receiver Name : " + receiver.getName());
//
//        // Check if a partnership already exists
//        if (accountabilityPartnerRepository.findByUserAndPartner(sender, receiver).isPresent() ||
//                accountabilityPartnerRepository.findByUserAndPartner(receiver, sender).isPresent()) {
//            return "You are already partners.";
//        }
//
//        // Create a new accountability partner request
//        AccountabilityPartner request = new AccountabilityPartner();
//        request.setUser(sender);
//        request.setPartner(receiver);
//        request.setStatus(AccountabilityPartner.Status.PENDING);
//
//        accountabilityPartnerRepository.save(request);
//        return "Request sent successfully.";
//    }

    public String sendRequest(Long senderId, Long receiverId) {
        System.out.println("Sending request from " + senderId + " to " + receiverId);
        Optional<User> senderOpt = userRepository.findById(senderId);
        Optional<User> receiverOpt = userRepository.findById(receiverId);

        if (senderOpt.isEmpty() || receiverOpt.isEmpty()) {
            return "User not found.";
        }

        User sender = senderOpt.get();
        System.out.println("Sender Name : " + sender.getName());
        User receiver = receiverOpt.get();
        System.out.println("Receiver Name : " + receiver.getName());

        // Check if a partnership already exists
        Optional<AccountabilityPartner> existingPartnership = accountabilityPartnerRepository.findByUserAndPartner(sender, receiver);
        Optional<AccountabilityPartner> existingPartnershipReverse = accountabilityPartnerRepository.findByUserAndPartner(receiver, sender);



        System.out.println("Checking existing partnership");
        if (existingPartnership.isPresent()) {
            AccountabilityPartner partnership = existingPartnership.get();
//            Long partnerId = partnership.getPartner().getId();
//            Long userId = partnership.getUser().getId();
            if (partnership.getStatus() == AccountabilityPartner.Status.REVOKED) {
                System.out.println("Partnership status is REVOKED, So, Updating it to PENDING.");
                return updatePartnershipStatus(partnership, AccountabilityPartner.Status.PENDING);
            }
            return checkPartnershipStatus(partnership);
        }else if (existingPartnershipReverse.isPresent()) {
            AccountabilityPartner partnership = existingPartnershipReverse.get();
//            Long partnerId = partnership.getPartner().getId();
//            Long userId = partnership.getUser().getId();
            if (partnership.getStatus() == AccountabilityPartner.Status.REVOKED) {
                System.out.println("Partnership status is REVOKED, So, Updating it to PENDING.");
                return updatePartnershipStatus(partnership, AccountabilityPartner.Status.PENDING);
            }
            return checkPartnershipStatus(partnership);
        }

        // Create a new accountability partner request
        System.out.println("Creating new request");

        return createNewPartnership(sender, receiver);

    }

    private String updatePartnershipStatus(AccountabilityPartner partnership, AccountabilityPartner.Status status) {
        partnership.setStatus(status);
        accountabilityPartnerRepository.save(partnership);
        return status == AccountabilityPartner.Status.PENDING ? "Request Sent. Your partnership is in Pending." : "Unknown status while processing REVOKED one.";
    }

    private String createNewPartnership(User sender, User receiver) {
        AccountabilityPartner request = new AccountabilityPartner();
        request.setUser(sender);
        request.setPartner(receiver);
        request.setStatus(AccountabilityPartner.Status.PENDING);
        accountabilityPartnerRepository.save(request);
        return "Request sent successfully.";
    }

    // Helper method to check the partnership status
    private String checkPartnershipStatus(AccountabilityPartner partnership) {
        switch (partnership.getStatus()) {
            case PENDING:
                return "Request already sent, but not yet responded.";
            case ACCEPTED:
                return "You are already partners.";
            case REJECTED:
                return "Previous request was rejected. You can send a new request.";
            default:
                return "Unexpected status.";
        }
    }


//    public String respondToRequest(Long receiverId, Long senderId, boolean accept) {
//        System.out.println("Accepting request from " + senderId + " to " + receiverId);
//        Optional<User> senderOpt = userRepository.findById(senderId);
//        Optional<User> receiverOpt = userRepository.findById(receiverId);
//
//        if (senderOpt.isEmpty() || receiverOpt.isEmpty()) {
//            return "User not found.";
//        }
//
//        User sender = senderOpt.get();
//        System.out.println("Sender Name : " + sender.getName());
//        User receiver = receiverOpt.get();
//        System.out.println("Receiver Name : " + receiver.getName());
//
//        Optional<AccountabilityPartner> requestOpt =
//                accountabilityPartnerRepository.findByUserAndPartner(sender, receiver);
//
//        if (requestOpt.isEmpty()) {
//            return "No pending request found.";
//        }
//
//        AccountabilityPartner request = requestOpt.get();
//        request.setStatus(accept ? AccountabilityPartner.Status.ACCEPTED : AccountabilityPartner.Status.REJECTED);
//        accountabilityPartnerRepository.save(request);
//
//        return accept ? "Request accepted." : "Request rejected.";
//    }


    public String respondToRequest(Long receiverId, Long senderId, boolean accept) {
        System.out.println("Responding to request from " + senderId + " to " + receiverId);
        Optional<User> senderOpt = userRepository.findById(senderId);
        Optional<User> receiverOpt = userRepository.findById(receiverId);

        if (senderOpt.isEmpty() || receiverOpt.isEmpty()) {
            return "User not found.";
        }

        User sender = senderOpt.get();
        User receiver = receiverOpt.get();

        Optional<AccountabilityPartner> requestOpt = accountabilityPartnerRepository.findByUserAndPartner(sender, receiver);

        if (requestOpt.isEmpty()) {
            return "No pending request found.";
        }

        AccountabilityPartner request = requestOpt.get();

        // If the request is already accepted, no need to process it again.
        if (request.getStatus() == AccountabilityPartner.Status.ACCEPTED) {
            return "You are already partners.";
        }

        // If the request is already revoked, You need to send request again
        if (request.getStatus() == AccountabilityPartner.Status.REVOKED) {
            return "You Partnership status is Revoked, so you need to send request again";
        }

        // Update the status based on user's response
        request.setStatus(accept ? AccountabilityPartner.Status.ACCEPTED : AccountabilityPartner.Status.REJECTED);
        accountabilityPartnerRepository.save(request);

        return accept ? "Request accepted. You are now partners." : "Request rejected.";
    }


    public Optional<AccountabilityPartner> getPartner(Long userId) {
        System.out.println("Finding partner for user: " + userId);
        Optional<User> userOpt = userRepository.findById(userId);
        System.out.println("User found: " + userOpt.isPresent());
        System.out.println("User ID: " + userOpt.get().getId());
        System.out.println("User Name: " + userOpt.get().getName());
        return userOpt.flatMap(accountabilityPartnerRepository::findByUser);
    }

    public String removePartner(Long userId) {
        System.out.println("Revoking partner for user: " + userId);

        Optional<User> userOpt = userRepository.findById(userId);
        if (userOpt.isEmpty()) {
            return "User not found.";
        }


        User user = userOpt.get();

        System.out.println("The user " + user.getName() + " wants to remove his partner!!!");

        // Find the partnership where the user is either 'user' or 'partner'
        Optional<AccountabilityPartner> partnershipOpt = accountabilityPartnerRepository.findByUser(user);

        if (partnershipOpt.isEmpty()) {
            return "No accountability partner found.";
        }

        AccountabilityPartner partnership = partnershipOpt.get();

        System.out.println("Fetched partnership is : ");
        System.out.println("User name" + partnership.getUser().getName());
        System.out.println("Partner name" + partnership.getPartner().getName());

        // Check if the partnership is not already revoked
        if (partnership.getStatus() == AccountabilityPartner.Status.REVOKED) {
            System.out.println("Partnership already revoked!!!");
            return "Partnership has already been revoked.";
        }

        // Update the status to REVOKED
        partnership.setStatus(AccountabilityPartner.Status.REVOKED);
        System.out.println("Partnership status set to REVOKED.");

        // Save the updated partnership
        accountabilityPartnerRepository.save(partnership);
        System.out.println("Saved the partnership!!!!");

        return "Accountability partnership revoked successfully.";
    }



//    public AccountabilityPartner getAccountabilityPartner(Long userId) {
//        System.out.println("getAccountabilityPartner service");
//        // Fetch the accountability partner where the user is either 'user' or 'partner'
//        Optional<AccountabilityPartner> accountabilityPartnerOpt = accountabilityPartnerRepository.findByUserIdOrPartnerId(userId, userId);
//
//        if (accountabilityPartnerOpt.isEmpty()) {
//            return null; // No partner found
//        }
//
//        AccountabilityPartner accountabilityPartner = accountabilityPartnerOpt.get();
//
//        // Check if the status is REVOKED, and return null if it is
//        if (accountabilityPartner.getStatus() == AccountabilityPartner.Status.REVOKED) {
//            return null; // No active partner
//        }else if (accountabilityPartner.getStatus() == AccountabilityPartner.Status.ACCEPTED) {
//            return accountabilityPartner;
//        }
//
//        return accountabilityPartner; // Return the active accountability partner
//    }

    public AccountabilityPartner getAccountabilityPartner(Long userId) {
        System.out.println("Fetching accountability partner for userId: " + userId);

        // Fetch all partnerships where the user is either 'user' or 'partner'
        List<AccountabilityPartner> partnerships = accountabilityPartnerRepository.findByUserIdOrPartnerId(userId, userId);

        if (partnerships.isEmpty()) {
            return null; // No partner found
        }

        // ✅ Filter for only ACCEPTED status
        for (AccountabilityPartner partner : partnerships) {
            if (partner.getStatus() == AccountabilityPartner.Status.ACCEPTED) {
                return partner; // Return the first active partner
            }
        }

        return null; // If no active partner exists
    }

    public List<AccountabilityPartner> getPendingRequests(Long userId) {
        return accountabilityPartnerRepository.findByPartnerIdAndStatus(userId, AccountabilityPartner.Status.PENDING);
    }

}
